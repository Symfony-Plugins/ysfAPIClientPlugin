<?php

/**
 * Copyright (c) 2008 Yahoo! Inc.  All rights reserved.
 *
 * The copyrights embodied in the content in this file are licensed under
 * the MIT open source license.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * ysfViewConfigHandler allows you to configure views.
 *
 * @package    ysymfony
 * @subpackage api
 * @author     Dustin Whittle <dustin.whittle@symfony-project.com>
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: ysfViewConfigHandler.class.php 3777 2007-04-13 10:25:16Z fabien $
 */
class ysfViewConfigHandler extends sfViewConfigHandler
{
  /**
   * Executes this configuration handler.
   *
   * @param array An array of absolute filesystem path to a configuration file
   *
   * @return string Data to be written to a cache file
   *
   * @throws <b>sfConfigurationException</b> If a requested configuration file does not exist or is not readable
   * @throws <b>sfParseException</b> If a requested configuration file is improperly formatted
   * @throws <b>sfInitializationException</b> If a view.yml key check fails
   */
  public function execute($configFiles)
  {
    // run standard config handler + add component aggregation
    $retval = parent::execute($configFiles);

    if(sfConfig::get('ysf_api_enabled', false))
    {
      // init our data array
      $data = array();

      $first = true;
      // second pass: iterate through all real view names
      foreach($this->yamlConfig as $viewName => $values)
      {
        if($viewName == 'all')
        {
          continue;
        }

        $data[] = ($first ? '' : 'else ')."if(\$actionInstance->getActionName().'Success' == '$viewName')\n"."{\n";
        $data[] = $this->addFetchComponents($viewName);
        $data[] = "}\n";

        $first = false;
      }

      // general view configuration
      $data[] = ($first ? '' : "else\n{")."\n";
      $data[] = $this->addFetchComponents();
      $data[] = ($first ? '' : "}")."\n";

      // compile data
      $componentConfiguration = sprintf("<?php\n".
      "// auto-generated by ysfViewConfigHandler\n".
      "// date: %s\n%s\n",
      date('Y/m/d H:i:s'), implode('', $data));

      $moduleName = sfContext::getInstance()->getModuleName();
      file_put_contents(sfContext::getInstance()->getConfigCache()->getCacheName('modules_'.$moduleName.'_config_components'), $componentConfiguration);
    }

    return $retval;
  }

  /**
   * Adds a component slot statement to the data.
   *
   * @param string The view name
   *
   * @return string The PHP statement
   */
  protected function addFetchComponents($viewName = '')
  {
    $data = '';

    $components = $this->mergeConfigValue('components', $viewName);

    foreach($components as $name => $component)
    {
      if(!is_array($component) || (count($component) < 1))
      {
        break;
      }

      if(is_array($component[0]))
      {
        $component = $component[0];
      }

      $data .= "
        if(\$controller->componentExists('{$component[0]}', '{$component[1]}'))
        {
          \$componentInstance = \$controller->getComponent('{$component[0]}', '{$component[1]}');
          \$fetchMethod = 'fetchDataFor".sfInflector::camelize($component[1])."';

          if(method_exists(\$componentInstance, \$fetchMethod))
          {
            \$componentInstance->\$fetchMethod();
            if(sfConfig::get('sf_debug') && sfConfig::get('sf_logging_enabled'))
            {
              \$this->getContext()->getLogger()->info('{ysfExecutionFilter} fetched data for component {$component[0]}/{$component[1]}');
            }
          }
        }\n";

    }

    return $data;
  }

  /**
   * Adds a component slot statement to the data.
   *
   * @param string The view name
   *
   * @return string The PHP statement
   */
  protected function addComponentSlots($viewName = '')
  {
    $data = '';

    $components = $this->mergeConfigValue('components', $viewName);
    foreach ($components as $name => $component)
    {
      if(is_int($name) || ($name == '-'))
      {
        break; // break for data components
      }
      else
      {
        if(!is_array($component) || (count($component) < 1))
        {
          $component = array(null, null);
        }

        if(is_array($component[0]))
        {
          $component = $component[0];
        }

        $data .= "  \$this->setComponentSlot('$name', '{$component[0]}', '{$component[1]}');\n";
        $data .= "  if (sfConfig::get('sf_logging_enabled')) \$this->context->getLogger()->info('{sfViewConfig} set component \"$name\" ({$component[0]}/{$component[1]})');\n";

      }
    }

    return $data;
  }
}

